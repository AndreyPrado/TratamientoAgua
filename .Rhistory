)
return(modelo)
}
modelo_opti <- xg_optimizar_modelo(lista, grid)
View(base)
xg_modelo_basico_cv <- function(lista_datos, parametros, nrounds = 5000, cv_folds = 5){
dtrain <- lista_datos$dtrain
cv_res <- xgb.cv(
params = parametros,
data = dtrain,
nrounds = nrounds,
nfold = cv_folds,
metrics = "rmse",
early_stopping_rounds = 10,
verbose = 1
)
best_nrounds <- cv_res$best_iteration
modelo <- xgb.train(
params = parametros,
data = dtrain,
nrounds = best_nrounds
)
test_x <- lista_datos$test_x
test_y <- lista_datos$test_y
train_x <- lista_datos$train_x
train_y <- lista_datos$train_y
dtrain <- lista_datos$dtrain
dtest <- lista_datos$dtest
train_preds <- predict(modelo, dtrain)
test_preds<- predict(modelo, dtest)
# RMSE (Root Mean Squared Error)
rmse_train <- rmse(train_y, train_preds)
rmse_test <- rmse(test_y, test_preds)
# MAE (Mean Absolute Error)
mae_train <- mae(train_y, train_preds)
mae_test <- mae(test_y, test_preds)
# R² (Coeficiente de determinación)
r2_train <- cor(train_y, train_preds)^2
r2_test <- cor(test_y, test_preds)^2
# MAPE (Mean Absolute Porcentual Error)
mape_train <- mape(train_y, train_preds)
mape_test <- mape(test_y, test_preds)
# RAE (Relative Absolute Error)
rae_train <- rae(train_y, train_preds)
rae_test <- rae(test_y, test_preds)
## Métricas de errores
errores <- test_y - test_preds
# Skewness
skewness <- skewness(errores)
# Kurtosis
kurtosis <- moments::kurtosis(errores)
# Imprimir resultados
cat("Train RMSE:", rmse_train, "\n",
"Test RMSE:", rmse_test, "\n",
"Train MAE:", mae_train, "\n",
"Test MAE:", mae_test, "\n",
"Train MAPE", mape_train, "\n",
"Test MAPE", mape_test, "\n",
"Train RAE", rae_train, "\n",
"Test RAE", rae_test, "\n",
"Train R²:", r2_train, "\n",
"Test R²:", r2_test, "\n",
"MÉTRICAS DE ERRORES", "\n",
"Simetría", skewness, "\n",
"Kurtosis", kurtosis, "\n"
)
return(modelo)
}
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 2000)
lista <- xg_particion_datos(base, "dqoj", 0.5, 123)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 2000)
lista <- xg_particion_datos(base, "dqoj", 0.55, 123)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 2000)
View(xg_modelo_basico_cv)
xg_modelo_basico_cv <- function(lista_datos, parametros, nrounds = 5000, cv_folds = 5, early = 40){
dtrain <- lista_datos$dtrain
cv_res <- xgb.cv(
params = parametros,
data = dtrain,
nrounds = nrounds,
nfold = cv_folds,
metrics = "rmse",
early_stopping_rounds = early,
verbose = 1
)
best_nrounds <- cv_res$best_iteration
modelo <- xgb.train(
params = parametros,
data = dtrain,
nrounds = best_nrounds
)
test_x <- lista_datos$test_x
test_y <- lista_datos$test_y
train_x <- lista_datos$train_x
train_y <- lista_datos$train_y
dtrain <- lista_datos$dtrain
dtest <- lista_datos$dtest
train_preds <- predict(modelo, dtrain)
test_preds<- predict(modelo, dtest)
# RMSE (Root Mean Squared Error)
rmse_train <- rmse(train_y, train_preds)
rmse_test <- rmse(test_y, test_preds)
# MAE (Mean Absolute Error)
mae_train <- mae(train_y, train_preds)
mae_test <- mae(test_y, test_preds)
# R² (Coeficiente de determinación)
r2_train <- cor(train_y, train_preds)^2
r2_test <- cor(test_y, test_preds)^2
# MAPE (Mean Absolute Porcentual Error)
mape_train <- mape(train_y, train_preds)
mape_test <- mape(test_y, test_preds)
# RAE (Relative Absolute Error)
rae_train <- rae(train_y, train_preds)
rae_test <- rae(test_y, test_preds)
## Métricas de errores
errores <- test_y - test_preds
# Skewness
skewness <- skewness(errores)
# Kurtosis
kurtosis <- moments::kurtosis(errores)
# Imprimir resultados
cat("Train RMSE:", rmse_train, "\n",
"Test RMSE:", rmse_test, "\n",
"Train MAE:", mae_train, "\n",
"Test MAE:", mae_test, "\n",
"Train MAPE", mape_train, "\n",
"Test MAPE", mape_test, "\n",
"Train RAE", rae_train, "\n",
"Test RAE", rae_test, "\n",
"Train R²:", r2_train, "\n",
"Test R²:", r2_test, "\n",
"MÉTRICAS DE ERRORES", "\n",
"Simetría", skewness, "\n",
"Kurtosis", kurtosis, "\n"
)
return(modelo)
}
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 2500, early = 50)
lista <- xg_particion_datos(base, "dqoj", 0.5, 123)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 2500, early = 50)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 1500, early = 50)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 1500, early = 50)
grid <- expand.grid(
nrounds = 100,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
modelo_opti <- xg_optimizar_modelo(lista, grid)
xg_modelo_basico_cv <- function(lista_datos, parametros, nrounds = 5000, cv_folds = 5, early = 40){
dtrain <- lista_datos$dtrain
cv_res <- xgb.cv(
params = parametros,
data = dtrain,
nrounds = nrounds,
nfold = cv_folds,
metrics = "rmse",
early_stopping_rounds = early,
verbose = 1
)
best_nrounds <- cv_res$best_iteration
modelo <- xgb.train(
params = parametros,
data = dtrain,
nrounds = best_nrounds
)
test_x <- lista_datos$test_x
test_y <- lista_datos$test_y
train_x <- lista_datos$train_x
train_y <- lista_datos$train_y
dtrain <- lista_datos$dtrain
dtest <- lista_datos$dtest
train_preds <- predict(modelo, dtrain)
test_preds<- predict(modelo, dtest)
# RMSE (Root Mean Squared Error)
rmse_train <- rmse(train_y, train_preds)
rmse_test <- rmse(test_y, test_preds)
# MAE (Mean Absolute Error)
mae_train <- mae(train_y, train_preds)
mae_test <- mae(test_y, test_preds)
# R² (Coeficiente de determinación)
r2_train <- cor(train_y, train_preds)^2
r2_test <- cor(test_y, test_preds)^2
# MAPE (Mean Absolute Porcentual Error)
mape_train <- mape(train_y, train_preds)
mape_test <- mape(test_y, test_preds)
# RAE (Relative Absolute Error)
rae_train <- rae(train_y, train_preds)
rae_test <- rae(test_y, test_preds)
## Métricas de errores
errores <- test_y - test_preds
# Skewness
skewness <- skewness(errores)
# Kurtosis
kurtosis <- moments::kurtosis(errores)
# Imprimir resultados
cat("Train RMSE:", rmse_train, "\n",
"Test RMSE:", rmse_test, "\n",
"Train MAE:", mae_train, "\n",
"Test MAE:", mae_test, "\n",
"Train MAPE", mape_train, "\n",
"Test MAPE", mape_test, "\n",
"Train RAE", rae_train, "\n",
"Test RAE", rae_test, "\n",
"Train R²:", r2_train, "\n",
"Test R²:", r2_test, "\n",
"MÉTRICAS DE ERRORES", "\n",
"Simetría", skewness, "\n",
"Kurtosis", kurtosis, "\n"
)
return(modelo)
}
### Modificar un poco la base
base <- read.csv("data/Brujo/BaseBrujoModelo.csv")
base <- base %>%
select(-X)
setwd("C:/Users/andre/OneDrive/Escritorio/Cuencas")
### Modificar un poco la base
base <- read.csv("data/Brujo/BaseBrujoModelo.csv")
base <- base %>%
select(-X)
base <- base[!is.na(base[['caudal_minimo']]),]
base$fecha <- as.Date(base$fecha)
View(base)
lista <- xg_particion_datos(base, "caudal_minimo", 0.65, 123)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 1000, cv = 6, early = 50)
xg_grafico_importancia(modelo, 15)
xg_grafico_resultados(modelo, lista)
xg_grafico_residuos(modelo, lista)
xg_serie_tiempo(modelo = modelo, lista_datos = lista, nombre_fecha = "fecha")
xg_histograma_residuos(modelo, lista)
xg_boxplot_residuos(modelo, lista)
xg_densidad_predicciones(modelo, lista)
xg_qqplot_residuos(modelo, lista)
xg_violin_residuos(modelo, lista)
grid <- expand.grid(
nrounds = 100,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
modelo_opti <- xg_optimizar_modelo(lista, grid)
xg_grafico_importancia(modelo_opti, 15, opti = TRUE)
xg_grafico_resultados(modelo_opti, lista, opti = TRUE)
xg_grafico_residuos(modelo_opti, lista, opti = TRUE)
xg_serie_tiempo(modelo = modelo_opti, lista_datos = lista, nombre_fecha = "fecha", opti = TRUE)
xg_histograma_residuos(modelo_opti, lista, opti = TRUE)
xg_boxplot_residuos(modelo_opti, lista, opti = TRUE)
setwd("C:/Users/andre/OneDrive/Escritorio/UCR-TEC/2025/Primer Semestre 2025/Herramientas de Ciencia de Datos II/simulacion_planetas/simulacion_planetas_CA0305/cod/R")
cargar_csv <- function(ruta){
base <- read.csv(ruta, header = TRUE)
}
merc <- cargar_csv("././data/mercurio_jp.txt")
merc <- cargar_csv("./data/mercurio_jp.txt")
merc <- cargar_csv("../data/mercurio_jp.txt")
merc <- cargar_csv("../data/mercurio_jp.csv")
merc <- cargar_csv("./data/mercurio_jp.csv")
library(readr)
jupiter_jp <- read_csv("C:/Users/andre/OneDrive/Escritorio/UCR-TEC/2025/Primer Semestre 2025/Herramientas de Ciencia de Datos II/simulacion_planetas/simulacion_planetas_CA0305/data/jupiter_jp.csv")
View(jupiter_jp)
setwd("C:/Users/andre/OneDrive/Escritorio/UCR-TEC/2025/Primer Semestre 2025/Herramientas de Ciencia de Datos II/simulacion_planetas/simulacion_planetas_CA0305")
merc <- cargar_csv("/data/mercurio_jp.csv")
cargar_csv <- function(ruta){
base <- read.csv(ruta, header = TRUE)
}
merc <- cargar_csv("/data/mercurio_jp.csv")
merc <- cargar_csv("data/mercurio_jp.csv")
view(merc)
library(tidyverse)
library(lubridate)
library(dplyr)
view(merc)
cargar_csv <- function(ruta){
# Cargar el csv
base <- read.csv(ruta, header = TRUE)
# Eliminar la primera columna
base <- base %>% select(-JDTDB)
}
merc <- cargar_csv("data/mercurio_jp.csv")
view(merc)
glimpse(base)
glimpse(merc)
merc <- cargar_csv("data/venus_jp.csv")
glimpse(merc)
cargar_csv <- function(ruta){
# Cargar el csv
base <- read.csv(ruta, header = TRUE)
# Eliminar la primera columna
base <- base %>% select(-JDTDB) %>%  select(-X.1)
}
merc <- cargar_csv("data/venus_jp.csv")
glimpse(merc)
formato_col <- function(base, nombre){
# Dar formato a las fechas
fechas_limpias <- sub("A\\.D\\. (\\d{4}-[A-Za-z]{3}-\\d{2}) .*", "\\1", base$Fecha)
base$Fecha <- format(as.Date(fechas_limpias, format = "%Y-%b-%d"), "%Y-%m-%d")
# Cambiar nombre de las columnas
colnames(base) <- c("fecha", paste0(nombre,"_x"),
paste0(nombre,"_y"),paste0(nombre,"_z"),paste0(nombre,"_vx"),
paste0(nombre,"_vy"),paste0(nombre,"_vz"))
}
formato_col <- function(base, nombre){
# Dar formato a las fechas
fechas_limpias <- sub("A\\.D\\. (\\d{4}-[A-Za-z]{3}-\\d{2}) .*", "\\1", base$Fecha)
base$Fecha <- format(as.Date(fechas_limpias, format = "%Y-%b-%d"), "%Y-%m-%d")
# Cambiar nombre de las columnas
colnames(base) <- c("fecha", paste0(nombre,"_x"),
paste0(nombre,"_y"),paste0(nombre,"_z"),paste0(nombre,"_vx"),
paste0(nombre,"_vy"),paste0(nombre,"_vz"))
return(base)
}
merc <- formato_col(merc, "mercurio")
glimpse(merc)
view(merc)
merc <- cargar_csv("data/venus_jp.csv")
merc <- formato_col(merc, "mercurio")
view(merc)
formato_col <- function(base, nombre){
# Dar formato a las fechas
fechas_limpias <- gsub("^A\\.D\\.\\s+","", base$Fecha)
base$Fecha <- parse_date_time(
fechas_limpias, orders = "Y-b-d HMS", locale = "en_us.utf8"
)
base$Fecha <- format(base$Fecha, "%Y-%m-%d")
# Cambiar nombre de las columnas
colnames(base) <- c("fecha", paste0(nombre,"_x"),
paste0(nombre,"_y"),paste0(nombre,"_z"),paste0(nombre,"_vx"),
paste0(nombre,"_vy"),paste0(nombre,"_vz"))
return(base)
}
merc <- cargar_csv("data/venus_jp.csv")
merc <- formato_col(merc, "mercurio")
view(merc)
merc.isnull()
merc.isnull
is.na(merc)
sum(is.na(merc))
ind <- which(is.na(base))
ind <- which(is.na(merc))
print(ind)
cargar_csv <- function(ruta){
# Cargar el csv
base <- read.csv(ruta, header = TRUE)
# Eliminar la primera columna
base <- base %>% select(-JDTDB) %>%  select(-X.1)
base <- base[1:9133,]
}
merc <- cargar_csv("data/venus_jp.csv")
merc <- formato_col(merc, "mercurio")
glimpse(merc)
view(merc)
unir_bases <- function(bases, columna){
base_final <- reduce(
.x = bases,
.f = ~left_join(.x, .y, by = columna),
.init = bases[[1]]
)
return(base_final)
}
planetas <- unir_bases(planetas, Fecha)
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
# Mercurio
merc <- cargar_csv("data/mercurio_jp.csv")
merc <- formato_col(merc, "mercurio")
# Venus
ven <- cargar_csv("data/venus_jp.csv")
ven <- formato_col(ven, "venus")
# Tierra
tie <- cargar_csv("data/tierra_jp.csv")
tie <- formato_col(tie, "tierra")
# Marte
mar <- cargar_csv("data/marte_jp.csv")
mar <- formato_col(mar, "marte")
# Júpiter
jup <- cargar_csv("data/jupiter_jp.csv")
jup <- formato_col(jup, "jupiter")
# Saturno
sat <- cargar_csv("data/saturno_jp.csv")
sat <- formato_col(sat, "saturno")
# Urano
ura <- cargar_csv("data/urano_jp.csv")
ura <- formato_col(ura, "urano")
# Neptuno
nep <- cargar_csv("data/neptuno_jp.csv")
nep <- formato_col(nep, "neptuno")
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, Fecha)
planetas <- unir_bases(planetas, "Fecha")
planetas <- unir_bases(planetas, "fecha")
view(planetas)
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, "fecha")
view(planetas)
unir_bases <- function(bases, columna){
inicial <- bases[[1]]
for (base in Bases){
initial <- left_join(initial, base, by = "fecha")
}
}
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, "fecha")
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, "fecha")
unir_bases <- function(bases, columna){
inicial <- bases[[1]]
for (base in Bases){
inicial <- left_join(inicial, base, by = "fecha")
}
}
unir_bases <- function(bases, columna){
inicial <- bases[[1]]
for (base in bases){
inicial <- left_join(inicial, base, by = "fecha")
}
}
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, "fecha")
view(planetas)
unir_bases <- function(bases, columna){
inicial <- bases[[1]]
for (base in bases){
inicial <- left_join(inicial, base, by = columna)
}
return(inicial)
}
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, "fecha")
view(planetas)
# Mercurio
merc <- cargar_csv("data/mercurio_jp.csv")
merc <- formato_col(merc, "mercurio")
# Venus
ven <- cargar_csv("data/venus_jp.csv")
ven <- formato_col(ven, "venus")
# Tierra
tie <- cargar_csv("data/tierra_jp.csv")
tie <- formato_col(tie, "tierra")
# Marte
mar <- cargar_csv("data/marte_jp.csv")
mar <- formato_col(mar, "marte")
# Júpiter
jup <- cargar_csv("data/jupiter_jp.csv")
jup <- formato_col(jup, "jupiter")
# Saturno
sat <- cargar_csv("data/saturno_jp.csv")
sat <- formato_col(sat, "saturno")
# Urano
ura <- cargar_csv("data/urano_jp.csv")
ura <- formato_col(ura, "urano")
# Neptuno
nep <- cargar_csv("data/neptuno_jp.csv")
nep <- formato_col(nep, "neptuno")
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, "fecha")
view(planetas)
unir_bases <- function(bases, columna){
inicial <- bases[[1]]
for (base in bases[-1]){
inicial <- left_join(inicial, base, by = columna)
}
return(inicial)
}
planetas <- list(merc, ven, tie, mar, jup, sat, ura, nep)
planetas <- unir_bases(planetas, "fecha")
view(planetas)
write.csv(planetas, "data/sistema_solar.csv")
