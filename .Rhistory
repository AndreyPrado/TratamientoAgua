) +
theme_minimal()
}
xg_grafico_importancia <- function(modelo, top = 10, opti = FALSE){
if (opti){
importancia <- varImp(modelo)
plot(importancia, top = top)
}
else{
importancia <- xgb.importance(model = modelo)
ggplot(importancia[1:top,], aes(x = reorder(Feature, Gain), y = Gain)) +
geom_col(fill = "#002F6C") +
coord_flip() +
labs(
title = "Importancia de Variables",
x = "Variable",
y = "Importancia"
) +
theme_minimal()
}
}
xg_serie_tiempo <- function(modelo, lista_datos, nombre_fecha, opti = FALSE){
if (opti){
preds <- predict(modelo, lista_datos$test_x)
}
else{
preds <- predict(modelo, lista_datos$dtest)
}
temp <- as.data.frame(lista_datos$test_x)
test_y <- lista_datos$test_y
fechas <- as.Date(temp[[nombre_fecha]], origin = "1970-01-01")
resultados <- data.frame(real = test_y, prediccion = preds, fecha = fechas)
ggplot(resultados, aes(x = fecha)) +
geom_line(aes(y=real, color = "Valor Real"), size = 1.2)+
geom_line(aes(y=prediccion,  color = "Predicción"), linetype = "dashed", size = 1.2) +
scale_color_manual(values = c("Valor Real" = "#002F6C", "Predicción" = "#33658A")) +
scale_x_date(
date_breaks = "6 months",
date_labels = "%b %Y"
) +
labs(
title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Valor",
color = "Leyenda"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
legend.position = "top",
legend.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
}
xg_histograma_residuos <- function(modelo, lista_datos, opti = FALSE){
if (opti){
preds <- predict(modelo, lista_datos$test_x)
} else {
preds <- predict(modelo, lista_datos$dtest)
}
test_y <- lista_datos$test_y
residuos <- test_y - preds
ggplot(data.frame(residuos = residuos), aes(x = residuos)) +
geom_histogram(fill = "#002F6C", color = "black", bins = 30) +
geom_vline(xintercept = 0, linetype = "dashed", color = "#33658A") +
labs(
title = "Distribución de Residuos",
x = "Residuo (Real - Predicción)",
y = "Frecuencia"
) +
theme_minimal()
}
xg_boxplot_residuos <- function(modelo, lista_datos, opti = FALSE){
if (opti){
preds <- predict(modelo, lista_datos$test_x)
} else {
preds <- predict(modelo, lista_datos$dtest)
}
test_y <- lista_datos$test_y
residuos <- test_y - preds
grupos <- cut(preds, breaks = quantile(preds, probs = seq(0, 1, 0.25)), include.lowest = TRUE)
resultados <- data.frame(prediccion = preds, residuos = residuos, grupo = grupos)
ggplot(resultados, aes(x = grupo, y = residuos)) +
geom_boxplot(fill = "#33658A") +
geom_hline(yintercept = 0, linetype = "dashed", color = "#E27D60") +
labs(
title = "Boxplot de Residuos por Cuartil de Predicción",
x = "Cuartil de Predicción",
y = "Residuo"
) +
theme_minimal(base_size = 8)
}
xg_densidad_predicciones <- function(modelo, lista_datos, opti = FALSE){
if (opti){
preds <- predict(modelo, lista_datos$test_x)
} else {
preds <- predict(modelo, lista_datos$dtest)
}
test_y <- lista_datos$test_y
resultados <- data.frame(
valor = c(test_y, preds),
tipo = rep(c("Real", "Predicción"), each = length(test_y))
)
ggplot(resultados, aes(x = valor, fill = tipo, color = tipo)) +
geom_density(alpha = 0.4, size = 1.2) +
labs(
title = "Distribución de Valores Reales y Predicciones",
x = "Valor",
y = "Densidad",
fill = "Datos",
color = "Datos"
) +
scale_fill_manual(values = c("Real" = "#002F6C", "Predicción" = "#E27D60")) +
scale_color_manual(values = c("Real" = "#002F6C", "Predicción" = "#E27D60")) +
theme_minimal()
}
xg_qqplot_residuos <- function(modelo, lista_datos, opti = FALSE){
if (opti){
preds <- predict(modelo, lista_datos$test_x)
} else {
preds <- predict(modelo, lista_datos$dtest)
}
test_y <- lista_datos$test_y
residuos <- test_y - preds
ggplot(data.frame(residuos = residuos), aes(sample = residuos)) +
stat_qq(color = "#002F6C") +
stat_qq_line(color = "#33658A", linetype = "dashed") +
labs(
title = "QQ-Plot de Residuos",
x = "Cuantiles Teóricos",
y = "Cuantiles Observados"
) +
theme_minimal()
}
xg_violin_residuos <- function(modelo, lista_datos, opti = FALSE){
if (opti){
preds <- predict(modelo, lista_datos$test_x)
} else {
preds <- predict(modelo, lista_datos$dtest)
}
test_y <- lista_datos$test_y
residuos <- test_y - preds
grupos <- cut(preds, breaks = quantile(preds, probs = seq(0, 1, 0.25)), include.lowest = TRUE)
resultados <- data.frame(residuos = residuos, grupo = grupos)
ggplot(resultados, aes(x = grupo, y = residuos)) +
geom_violin(fill = "#002F6C", alpha = 0.6) +
geom_boxplot(width = 0.1, outlier.size = 0.5, fill = "#B4C5D0") +
geom_hline(yintercept = 0, color = "#33658A", linetype = "dashed") +
labs(
title = "Distribución de Residuos por Cuartil de Predicción",
x = "Cuartil de Predicción",
y = "Residuo"
) +
theme_minimal(base_size = 8)
}
### Modificar un poco la base
base <- read_excel("/Users/gara/Desktop/Agua/TratamientoAgua/data/base_agua_limpia_julio.xlsx")
### Modificar un poco la base
base <- read_excel("/Users/gara/Desktop/Agua/TratamientoAgua/data/base_agua_limpia_julio.xlsx")
base$latitud <- as.factor(base$latitud)
base$longitud <- as.factor(base$longitud)
base$sitio <- as.factor(base$sitio)
base$ubi_muestra <- as.factor(base$ubi_muestra)
base$cuerpo <- as.factor(base$cuerpo)
base$horarecolectaj <- as_hms(base$horarecolectaj)
### Modificar un poco la base
base <- read_excel("data/base_agua_limpia_julio.xlsx")
base$latitud <- as.factor(base$latitud)
base$longitud <- as.factor(base$longitud)
base$sitio <- as.factor(base$sitio)
base$ubi_muestra <- as.factor(base$ubi_muestra)
base$cuerpo <- as.factor(base$cuerpo)
base$horarecolectaj <- as_hms(base$horarecolectaj)
base <- base[!is.na(base$dqoj),]
## GRAFICOS EXTRA
base <- read_excel('data/base_agua_limpia.xlsx')
base %>% ggplot(aes(x = dqoj)) +
geom_histogram(fill = "#002F6C", color = "black", bins = 30) +
geom_vline(xintercept = 0, linetype = "dashed", color = "#33658A") +
labs(
title = "Distribución de la Demanda Química de Oxígeno en Julio",
x = "Demanda Química de Oxígeno en Julio",
y = "Frecuencia"
) +
theme_minimal()
base %>% ggplot(aes(x = dqof)) +
geom_histogram(fill = "#002F6C", color = "black", bins = 30) +
geom_vline(xintercept = 0, linetype = "dashed", color = "#33658A") +
labs(
title = "Distribución de la Demanda Química de Oxígeno en Julio",
x = "Demanda Química de Oxígeno en Julio",
y = "Frecuencia"
) +
theme_minimal()
base %>% ggplot(aes(x = dqof)) +
geom_histogram(fill = "#002F6C", color = "black", bins = 30) +
geom_vline(xintercept = 0, linetype = "dashed", color = "#33658A") +
labs(
title = "Distribución de la Demanda Química de Oxígeno en Febrero",
x = "Demanda Química de Oxígeno en Febrero",
y = "Frecuencia"
) +
theme_minimal()
### Modificar un poco la base
base <- read_excel("data/base_agua_limpia_julio.xlsx")
base$latitud <- as.factor(base$latitud)
base$longitud <- as.factor(base$longitud)
base$sitio <- as.factor(base$sitio)
base$ubi_muestra <- as.factor(base$ubi_muestra)
base$cuerpo <- as.factor(base$cuerpo)
base$horarecolectaj <- as_hms(base$horarecolectaj)
base <- base[!is.na(base$dqoj),]
lista <- xg_particion_datos(base, "dqoj", 0.5, 123)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
grid <- expand.grid(
nrounds = 100,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
modelo_opti <- xg_optimizar_modelo(lista, grid)
### Modificar un poco la base
base <- read_excel("data/base_agua_limpia_febrero.xlsx")
base$latitud <- as.factor(base$latitud)
base$longitud <- as.factor(base$longitud)
base$sitio <- as.factor(base$sitio)
base$ubi_muestra <- as.factor(base$ubi_muestra)
base$cuerpo <- as.factor(base$cuerpo)
base$horarecolectaf <- as_hms(base$horarecolectaf)
base <- base[!is.na(base$dqof),]
lista <- xg_particion_datos(base, "dqof", 0.5, 123)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
grid <- expand.grid(
nrounds = 100,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
modelo_opti <- xg_optimizar_modelo(lista, grid)
### Modificar un poco la base
base <- read_excel("data/base_agua_limpia_julio.xlsx")
base$latitud <- as.factor(base$latitud)
base$longitud <- as.factor(base$longitud)
base$sitio <- as.factor(base$sitio)
base$ubi_muestra <- as.factor(base$ubi_muestra)
base$cuerpo <- as.factor(base$cuerpo)
base$horarecolectaj <- as_hms(base$horarecolectaj)
base <- base[!is.na(base$dqoj),]
lista <- xg_particion_datos(base, "dqoj", 0.5, 123)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
grid <- expand.grid(
nrounds = 100,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
modelo_opti <- xg_optimizar_modelo(lista, grid)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 1500, early = 50)
modelo <- xg_modelo_basico_cv(lista, parametros = parametros, nrounds = 1500, early = 50)
modelo_opti <- xg_optimizar_modelo(lista, grid)
modelo_opti <- xg_optimizar_modelo(lista, grid)
source("cod/r/FormatoModelo.R")
# Cargar Base de Datos
base_brujo <- cargar_base("data/Brujo/Brujo_NASA.csv")
# Pasar fecha a formato Datetime
base_brujo <- formato_fechas(base_brujo, "fecha")
# Realizar Rezagos hasta 6 meses
base_brujo <- rezagos(base_brujo, c("humedad","temp","temp_max","temp_min","prep","soil_perfil","soil_superf","dir_viento","vel_viento","nino","caudal_minimo"), 6, FALSE)
# Realizar rezago único para 6 meses
base_brujo <- rezagos(base_brujo, "caudal_minimo",12, TRUE)
# Filtrar por fechas
base_brujo <- filtrar(base_brujo, fecha, as.Date("1981-04-29") ,as.Date("1993-03-16"))
# Eliminar variables actuales
base_brujo <- eliminar(base_brujo, c("humedad","temp","temp_max","temp_min","prep","soil_perfil","soil_superf","dir_viento","vel_viento","nino"))
guardar(base_brujo, "Brujo")
library(reticulate)
use_python("C:/Users/andre/anaconda3/envs/CA0305/python.exe", required = TRUE)
reticulate::repl_python()
import sys
sys.path.append("cod/py/Clases")
from AnalisisDatos import AnalisisDatos
from Grafico import Grafico
analisis_brujo = AnalisisDatos("data/Brujo/ModeloBrujo.csv")
grafico_brujo = Grafico("data/Brujo/ModeloBrujo.csv")
grafico_brujo.linea('fecha','caudal_minimo')
grafico_brujo.descomposicion('STL','caudal_minimo')
grafico_brujo.boxplot('caudal_minimo')
grafico_brujo.dist('caudal_minimo')
grafico_brujo.heatmap()
from Modelo import Modelo
modelo_brujo = Modelo("data/Brujo/ModeloBrujo.csv")
modelo_brujo.top_corr(95)
quit
source("cod/r/XGBoost.R")
xgb_brujo <- xg_cargar_datos("data/Brujo/ModeloBrujo.csv", 'caudal_minimo')
xgb_brujo$fecha <- as.Date(xgb_brujo$fecha)
lista_brujo_xg <- xg_particion_datos(xgb_brujo, 'caudal_minimo', 0.8, 1234)
grid <-expand.grid(
nrounds = 500,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
modelo_basico_xg <- xg_modelo_basico(lista_brujo_xg, parametros, nrounds = 500)
xg_grafico_importancia(modelo_basico_xg)
xg_grafico_residuos(modelo_basico_xg, lista_brujo_xg)
xg_grafico_resultados(modelo_basico_xg, lista_brujo_xg)
xg_serie_tiempo(modelo_basico_xg, lista_brujo_xg, 'fecha')
modelo_optimizado_xg <- xg_optimizar_modelo(lista_brujo_xg, grid)
xg_grafico_importancia(modelo_optimizado_xg, 20, opti = TRUE)
xg_grafico_residuos(modelo_optimizado_xg, lista_brujo_xg, opti = TRUE)
xg_grafico_resultados(modelo_optimizado_xg, lista_brujo_xg, opti = TRUE)
xg_serie_tiempo(modelo_optimizado_xg,lista_datos = lista_brujo_xg, nombre_fecha = "fecha", opti = TRUE)
reticulate::repl_python()
from ModeloRandomForest import ModeloRandomForest
rf_brujo = ModeloRandomForest('data/Brujo/ModeloBrujo.csv', 'caudal_minimo', 'caudal_minimo')
rf_brujo.imputar_datos_faltantes()
rf_brujo.fechas_num('fecha')
rf_brujo.crear_y_ajustar_modelo()
quit
source("cod/r/FormatoModelo.R")
# Cargar Base de Datos
base_brujo <- cargar_base("data/Brujo/Brujo_NASA.csv")
# Pasar fecha a formato Datetime
base_brujo <- formato_fechas(base_brujo, "fecha")
# Realizar Rezagos hasta 6 meses
base_brujo <- rezagos(base_brujo, c("humedad","temp","temp_max","temp_min","prep","soil_perfil","soil_superf","dir_viento","vel_viento","nino","caudal_minimo"), 6, FALSE)
# Realizar rezago único para 6 meses
base_brujo <- rezagos(base_brujo, "caudal_minimo",12, TRUE)
# Filtrar por fechas
base_brujo <- filtrar(base_brujo, fecha, as.Date("1981-04-29") ,as.Date("1993-03-16"))
# Eliminar variables actuales
base_brujo <- eliminar(base_brujo, c("humedad","temp","temp_max","temp_min","prep","soil_perfil","soil_superf","dir_viento","vel_viento","nino"))
guardar(base_brujo, "Brujo")
library(reticulate)
use_python("C:/Users/andre/anaconda3/envs/CA0305/python.exe", required = TRUE)
reticulate::repl_python()
import sys
sys.path.append("cod/py/Clases")
from AnalisisDatos import AnalisisDatos
from Grafico import Grafico
analisis_brujo = AnalisisDatos("data/Brujo/ModeloBrujo.csv")
grafico_brujo = Grafico("data/Brujo/ModeloBrujo.csv")
grafico_brujo.linea('fecha','caudal_minimo')
grafico_brujo.descomposicion('STL','caudal_minimo')
grafico_brujo.boxplot('caudal_minimo')
grafico_brujo.dist('caudal_minimo')
grafico_brujo.heatmap()
from Modelo import Modelo
modelo_brujo = Modelo("data/Brujo/ModeloBrujo.csv")
modelo_brujo.top_corr(95)
quit
source("cod/r/XGBoost.R")
xgb_brujo <- xg_cargar_datos("data/Brujo/ModeloBrujo.csv", 'caudal_minimo')
xgb_brujo$fecha <- as.Date(xgb_brujo$fecha)
lista_brujo_xg <- xg_particion_datos(xgb_brujo, 'caudal_minimo', 0.8, 1234)
grid <-expand.grid(
nrounds = 500,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
modelo_basico_xg <- xg_modelo_basico(lista_brujo_xg, parametros, nrounds = 500)
xg_grafico_importancia(modelo_basico_xg)
xg_grafico_residuos(modelo_basico_xg, lista_brujo_xg)
xg_grafico_resultados(modelo_basico_xg, lista_brujo_xg)
xg_serie_tiempo(modelo_basico_xg, lista_brujo_xg, 'fecha')
modelo_optimizado_xg <- xg_optimizar_modelo(lista_brujo_xg, grid)
xg_grafico_importancia(modelo_optimizado_xg, 20, opti = TRUE)
xg_grafico_residuos(modelo_optimizado_xg, lista_brujo_xg, opti = TRUE)
xg_grafico_resultados(modelo_optimizado_xg, lista_brujo_xg, opti = TRUE)
xg_serie_tiempo(modelo_optimizado_xg,lista_datos = lista_brujo_xg, nombre_fecha = "fecha", opti = TRUE)
reticulate::repl_python()
from ModeloRandomForest import ModeloRandomForest
rf_brujo = ModeloRandomForest('data/Brujo/ModeloBrujo.csv', 'caudal_minimo', 'caudal_minimo')
rf_brujo.imputar_datos_faltantes()
rf_brujo.fechas_num('fecha')
rf_brujo.crear_y_ajustar_modelo()
source("cod/r/FormatoModelo.R")
# Cargar Base de Datos
base_brujo <- cargar_base("data/Brujo/Brujo_NASA.csv")
# Pasar fecha a formato Datetime
base_brujo <- formato_fechas(base_brujo, "fecha")
# Realizar Rezagos hasta 6 meses
base_brujo <- rezagos(base_brujo, c("humedad","temp","temp_max","temp_min","prep","soil_perfil","soil_superf","dir_viento","vel_viento","nino","caudal_minimo"), 6, FALSE)
# Realizar rezago único para 6 meses
base_brujo <- rezagos(base_brujo, "caudal_minimo",12, TRUE)
# Filtrar por fechas
base_brujo <- filtrar(base_brujo, fecha, as.Date("1981-04-29") ,as.Date("1993-03-16"))
# Eliminar variables actuales
base_brujo <- eliminar(base_brujo, c("humedad","temp","temp_max","temp_min","prep","soil_perfil","soil_superf","dir_viento","vel_viento","nino"))
guardar(base_brujo, "Brujo")
library(reticulate)
use_python("C:/Users/andre/anaconda3/envs/CA0305/python.exe", required = TRUE)
reticulate::repl_python()
import sys
sys.path.append("cod/py/Clases")
from AnalisisDatos import AnalisisDatos
from Grafico import Grafico
analisis_brujo = AnalisisDatos("data/Brujo/ModeloBrujo.csv")
grafico_brujo = Grafico("data/Brujo/ModeloBrujo.csv")
grafico_brujo.linea('fecha','caudal_minimo')
grafico_brujo.descomposicion('STL','caudal_minimo')
grafico_brujo.boxplot('caudal_minimo')
grafico_brujo.dist('caudal_minimo')
grafico_brujo.heatmap()
from Modelo import Modelo
modelo_brujo = Modelo("data/Brujo/ModeloBrujo.csv")
modelo_brujo.top_corr(95)
quit
source("cod/r/XGBoost.R")
xgb_brujo <- xg_cargar_datos("data/Brujo/ModeloBrujo.csv", 'caudal_minimo')
xgb_brujo$fecha <- as.Date(xgb_brujo$fecha)
lista_brujo_xg <- xg_particion_datos(xgb_brujo, 'caudal_minimo', 0.8, 1234)
grid <-expand.grid(
nrounds = 500,
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = 0,
colsample_bytree = 0.8,
min_child_weight = 1,
subsample = 0.8
)
parametros <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.01,
max_depth = 10,
lambda = 2,
alpha = 0.1,
subsample = 0.7,
colsample_bytree = 0.7
)
modelo_basico_xg <- xg_modelo_basico(lista_brujo_xg, parametros, nrounds = 500)
xg_grafico_importancia(modelo_basico_xg)
xg_grafico_residuos(modelo_basico_xg, lista_brujo_xg)
xg_grafico_resultados(modelo_basico_xg, lista_brujo_xg)
xg_serie_tiempo(modelo_basico_xg, lista_brujo_xg, 'fecha')
modelo_optimizado_xg <- xg_optimizar_modelo(lista_brujo_xg, grid)
xg_grafico_importancia(modelo_optimizado_xg, 20, opti = TRUE)
xg_grafico_residuos(modelo_optimizado_xg, lista_brujo_xg, opti = TRUE)
xg_grafico_resultados(modelo_optimizado_xg, lista_brujo_xg, opti = TRUE)
xg_serie_tiempo(modelo_optimizado_xg,lista_datos = lista_brujo_xg, nombre_fecha = "fecha", opti = TRUE)
reticulate::repl_python()
from ModeloRandomForest import ModeloRandomForest
rf_brujo = ModeloRandomForest('data/Brujo/ModeloBrujo.csv', 'caudal_minimo', 'caudal_minimo')
rf_brujo.imputar_datos_faltantes()
rf_brujo.fechas_num('fecha')
rf_brujo.crear_y_ajustar_modelo()
rf_brujo.evaluar_modelo()
